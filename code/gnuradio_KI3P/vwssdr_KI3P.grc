options:
  parameters:
    author: Oliver KI3P
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: vws_Sdr_KI3P
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: VWSSDR Receiver
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: bfo
  id: variable_qtgui_range
  parameters:
    comment: 4,0,1,3
    gui_hint: 4,0,1,3
    label: Fine tuning
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '10'
    stop: '3000'
    value: '1500'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 852.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.6'
    step: '0.001'
    stop: '1.4'
    value: '1'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: true
- name: if_freq_kHz
  id: variable
  parameters:
    comment: ''
    value: '6'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 76.0]
    rotation: 0
    state: enabled
- name: phase
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.1'
    step: '0.001'
    stop: '0.1'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 12.0]
    rotation: 0
    state: true
- name: reverse
  id: variable_qtgui_chooser
  parameters:
    comment: 3,2,1,1
    gui_hint: 3,2,1,1
    label: Sideband
    label0: Upper
    label1: Lower
    label2: BFO
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '3'
    option0: '-1'
    option1: '1'
    option2: '0'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QHBoxLayout
    type: raw
    value: '-1'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 788.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 172.0]
    rotation: 0
    state: enabled
- name: tune_freq_kHz
  id: variable
  parameters:
    comment: ''
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 76.0]
    rotation: 0
    state: enabled
- name: volume
  id: variable_qtgui_range
  parameters:
    comment: 2,0,1,3
    gui_hint: 2,0,1,3
    label: Volume
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.05'
    stop: '1.0'
    value: '0.7'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 812.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: bfo
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 460.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: bfo
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 764.0]
    rotation: 0
    state: enabled
- name: audio_sink_0_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 644.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: "In linux, use \"aplay -l\" to get \nthe sound card hardware address"
    device_name: hw:0,0
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '2'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 240.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: output = -gain*L+phase*R
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 208.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: output = R - gain*L*phase
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 320.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 528.0]
    rotation: 0
    state: true
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 632.0]
    rotation: 0
    state: true
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 272.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: tune_freq_kHz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1720, 292.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: output = -gain*L
    const: -gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 236.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: output = phase*R
    const: phase
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 164.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: output = -gain*L*phase
    const: phase
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 276.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: USB/LSB
    const: reverse
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1460.0, 640]
    rotation: 90
    state: enabled
- name: blocks_multiply_const_vxx_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: Volume
    const: volume
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1648, 540.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 512.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 768.0]
    rotation: 0
    state: enabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: 'if phase < 0: output  = -gain*L

      if phase >= 0: output = -gain*L+phase*R'
    enabled: 'True'
    input_index: 0 if phase < 0 else 1
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    num_outputs: '1'
    output_index: '0'
    showports: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 172.0]
    rotation: 0
    state: true
- name: blocks_selector_0_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: 'if phase < 0: output = R - gain*L*phase

      if phase >= 0: output = R'
    enabled: 'True'
    input_index: 0 if phase < 0 else 1
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    num_outputs: '1'
    output_index: '0'
    showports: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 316.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt, serial\n\nclass blk(gr.sync_block):  #\
      \ other base classes are basic_block, decim_block, interp_block\n    \"\"\"\
      Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ serial_port=None):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Update tune frequency',   # will show\
      \ up in GRC\n            in_sig=[],\n            out_sig=[]\n        )\n   \
      \     self.serial_port = serial_port\n        self.frequencyPortName = 'frequencyPort'\n\
      \        self.message_port_register_in(pmt.intern(self.frequencyPortName))\n\
      \        self.set_msg_handler(pmt.intern(self.frequencyPortName), self.handle_msg)\n\
      \        self.new_center_freq = 10000\n        self.center_freq = 10000\n  \
      \      self.IF_frequency_kHz = 6\n        if self.serial_port is not None:\n\
      \            self.serial = serial.Serial(self.serial_port,115200)\n        return\n\
      \n    def handle_msg(self, msg):\n        self.new_center_freq = pmt.to_long(pmt.cdr(msg))\
      \ - self.IF_frequency_kHz\n        if (self.new_center_freq != self.center_freq):\n\
      \            print(\"Updated frequency %d\"%self.new_center_freq)\n        \
      \    self.serial.write(b'FR %d\\n'%(self.new_center_freq*1000))\n          \
      \  self.center_freq = self.new_center_freq\n        return\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        if (self.new_center_freq != self.center_freq):\n            self.center_freq\
      \ = self.new_center_freq\n        return \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    serial_port: '"/dev/ttyACM0"'
  states:
    _io_cache: ('Update tune frequency', 'blk', [('serial_port', 'None')], [('frequencyPort',
      'message', 1)], [], 'Embedded Python Block example - a simple multiply const',
      ['serial_port'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 196.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: if_freq_kHz*1000
    comment: "Filter a band 6 kHz wide centered on if_freq_kHz. Then translate\nif_freq_kHz\
      \ to DC. So an input signal at (if_freq_kHz + tone_kHz) \nwill be at (tone_kHz)\
      \ after this step."
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1,samp_rate,3000, 200)
    type: ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 620.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 100.0]
    rotation: 0
    state: true
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'True'
    is_static: 'True'
    key: frequency_kHz
    label: Tune Frequency [kHz]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: int
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 156.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: Widget to display spectrum, waterfall, etc.
    fc: (tune_freq_kHz-if_freq_kHz)*1000
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'True'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 252.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '0']
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0_0, '1']
- [audio_source_0, '0', blocks_multiply_const_vxx_0, '0']
- [audio_source_0, '1', blocks_add_xx_0_0, '1']
- [audio_source_0, '1', blocks_multiply_const_vxx_0_0, '0']
- [audio_source_0, '1', blocks_selector_0_0, '1']
- [blocks_add_xx_0, '0', blocks_selector_0, '1']
- [blocks_add_xx_0_0, '0', blocks_selector_0_0, '0']
- [blocks_add_xx_0_1, '0', blocks_multiply_const_vxx_0_1, '0']
- [blocks_complex_to_float_0, '0', blocks_multiply_xx_0, '1']
- [blocks_complex_to_float_0, '1', blocks_multiply_xx_0_0, '0']
- [blocks_float_to_complex_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [blocks_float_to_complex_0, '0', qtgui_sink_x_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_add_xx_0, '1']
- [blocks_multiply_const_vxx_0, '0', blocks_multiply_const_vxx_0_0_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_selector_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', blocks_add_xx_0, '0']
- [blocks_multiply_const_vxx_0_0_0, '0', blocks_add_xx_0_0, '0']
- [blocks_multiply_const_vxx_0_0_1, '0', blocks_add_xx_0_1, '1']
- [blocks_multiply_const_vxx_0_1, '0', audio_sink_0_0, '0']
- [blocks_multiply_xx_0, '0', blocks_add_xx_0_1, '0']
- [blocks_multiply_xx_0_0, '0', blocks_multiply_const_vxx_0_0_1, '0']
- [blocks_selector_0, '0', blocks_float_to_complex_0, '0']
- [blocks_selector_0_0, '0', blocks_float_to_complex_0, '1']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_complex_to_float_0, '0']
- [qtgui_edit_box_msg_0, msg, blocks_msgpair_to_var_0, inpair]
- [qtgui_edit_box_msg_0, msg, epy_block_0, frequencyPort]

metadata:
  file_format: 1
