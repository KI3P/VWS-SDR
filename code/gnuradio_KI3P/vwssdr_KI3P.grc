options:
  parameters:
    author: Oliver KI3P
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: vws_Sdr_KI3P
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: VWSSDR Receiver
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: audio_lowpass
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: ''
    cutoff_freq: '2700'
    gain: '1.0'
    samp_rate: samp_rate
    width: '100'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752, 116.0]
    rotation: 0
    state: true
- name: bfo
  id: variable_qtgui_range
  parameters:
    comment: Adjust the fine tune frequency
    gui_hint: 1,1,1,2
    label: Fine tuning
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-3000'
    step: '1'
    stop: '3000'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 596.0]
    rotation: 0
    state: true
- name: fft_len
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 444.0]
    rotation: 0
    state: enabled
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: Adjust the I/Q gain balance
    gui_hint: 5,0,1,3
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.5'
    step: '0.01'
    stop: '0.5'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 20.0]
    rotation: 0
    state: true
- name: if_freq_kHz
  id: variable
  parameters:
    comment: ''
    value: '6'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 12.0]
    rotation: 0
    state: enabled
- name: phase
  id: variable_qtgui_range
  parameters:
    comment: Adjust the I/Q phase balance
    gui_hint: 4,0,1,3
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.1'
    step: '0.001'
    stop: '0.1'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 20.0]
    rotation: 0
    state: true
- name: reverse
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: 2,0,1,1
    label: Sideband
    label0: Upper
    label1: Lower
    label2: BFO
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '3'
    option0: '-1'
    option1: '1'
    option2: '0'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QHBoxLayout
    type: raw
    value: '-1'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 532.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 172.0]
    rotation: 0
    state: enabled
- name: tune_freq_kHz
  id: variable
  parameters:
    comment: ''
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 12.0]
    rotation: 0
    state: enabled
- name: volume
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 2,1,1,2
    label: Volume
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.5'
    stop: '50'
    value: '1.5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1608, 596.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: bfo
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 188.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: bfo
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 492.0]
    rotation: 0
    state: enabled
- name: audio_sink_0_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 356.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: "In linux, use \"arecord -l\" to get \nthe sound card hardware address"
    device_name: hw:0,0
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '2'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 240.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 256.0]
    rotation: 0
    state: true
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 360.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_len
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 676.0]
    rotation: 0
    state: true
- name: blocks_float_to_complex_0_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 240.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '10'
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/10
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 636.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '10'
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/10
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 732.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: tune_freq_kHz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1352, 172.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: USB/LSB
    const: reverse
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1380.0, 368]
    rotation: 90
    state: enabled
- name: blocks_multiply_const_vxx_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: Volume
    const: volume
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 268.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 240.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 496.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_len
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 504.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt, serial\n\nclass blk(gr.sync_block):  #\
      \ other base classes are basic_block, decim_block, interp_block\n    \"\"\"\
      Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ serial_port=None):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Update tune frequency',   # will show\
      \ up in GRC\n            in_sig=[],\n            out_sig=[]\n        )\n   \
      \     self.serial_port = serial_port\n        self.frequencyPortName = 'frequencyPort'\n\
      \        self.message_port_register_in(pmt.intern(self.frequencyPortName))\n\
      \        self.set_msg_handler(pmt.intern(self.frequencyPortName), self.handle_msg)\n\
      \        self.new_center_freq = 10000\n        self.center_freq = 10000\n  \
      \      self.IF_frequency_kHz = 6\n        if self.serial_port is not None:\n\
      \            self.serial = serial.Serial(self.serial_port,115200)\n        return\n\
      \n    def handle_msg(self, msg):\n        #self.new_center_freq = pmt.to_long(pmt.cdr(msg))\
      \ - self.IF_frequency_kHz\n        self.new_center_freq = pmt.to_float(pmt.cdr(msg))\
      \ - self.IF_frequency_kHz\n        if (self.new_center_freq != self.center_freq):\n\
      \            print(\"Updated frequency %d\"%self.new_center_freq)\n        \
      \    self.serial.write(b'FR %d\\n'%(self.new_center_freq*1000))\n          \
      \  self.center_freq = self.new_center_freq\n        return\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        if (self.new_center_freq != self.center_freq):\n            self.center_freq\
      \ = self.new_center_freq\n        return \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    serial_port: '"/dev/ttyACM0"'
  states:
    _io_cache: ('Update tune frequency', 'blk', [('serial_port', 'None')], [('frequencyPort',
      'message', 1)], [], 'Embedded Python Block example - a simple multiply const',
      ['serial_port'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 76.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, vectorSize=2048):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='SNR measurement',   # will show up in GRC\n   \
      \         in_sig=[(np.float32,vectorSize)],\n            out_sig=[np.float32,np.float32]\n\
      \        )\n\n    def work(self, input_items, output_items):\n        \"\"\"\
      example: multiply with constant\"\"\"\n        for vectorIndex in range(len(input_items[0])):\n\
      \            d = input_items[0][vectorIndex]\n            I = np.argmax(d)\n\
      \            # Find the average of the 50 bins around this maximum bin, but\
      \ exclude 10 bins on each side\n            ind = np.arange(len(d))\n      \
      \      window1 = (ind > (I+10)) & (ind < (I+30))\n            window2 = (ind\
      \ < (I-10)) & (ind > (I-30))\n            window = window1 | window2\n     \
      \       noise = np.mean(d[window])\n            signal = d[I]\n            SNR\
      \ = 10*np.log10(signal/noise)\n            # If the input is -73 dBm, then the\
      \ noise floor is\n            floor = -73.0 - SNR\n            #output_items[0][vectorIndex]\
      \ = signal\n            #output_items[1][vectorIndex] = noise\n            output_items[0][vectorIndex]\
      \ = SNR\n            output_items[1][vectorIndex] = floor\n\n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: "Calculate the amplitude of the \nlargest tone and the noise floor \n\
      on either side of it"
    maxoutbuf: '0'
    minoutbuf: '0'
    vectorSize: fft_len
  states:
    _io_cache: ('SNR measurement', 'blk', [('vectorSize', '2048')], [('0', 'float',
      2048)], [('0', 'float', 1), ('1', 'float', 1)], 'Embedded Python Block example
      - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 728.0]
    rotation: 0
    state: enabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_len
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_len)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 556.0]
    rotation: 0
    state: enabled
- name: fir_filter_xxx_0
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: audio_lowpass
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 260.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: if_freq_kHz*1000
    comment: "Filter a band 6 kHz wide centered on if_freq_kHz. Then translate\nif_freq_kHz\
      \ to DC. So an input signal at (if_freq_kHz + tone_kHz) \nwill be at (tone_kHz)\
      \ after this step."
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1,samp_rate,3000, 200)
    type: ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 348.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 100.0]
    rotation: 0
    state: true
- name: iqbalance_fix_cc_0
  id: iqbalance_fix_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    mag: gain
    maxoutbuf: '0'
    minoutbuf: '0'
    phase: phase
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 256.0]
    rotation: 0
    state: enabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: 1,0,1,1
    is_pair: 'True'
    is_static: 'True'
    key: frequency_kHz
    label: Tune Frequency [kHz]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 36.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '1'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_NONE
    gui_hint: 6,0,1,1
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"SNR [dB]"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 596.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '1'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_NONE
    gui_hint: 6,1,1,1
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"Noise floor [dBm]"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 740.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: Widget to display spectrum, waterfall, etc.
    fc: (tune_freq_kHz-if_freq_kHz)*1000
    fftsize: '1024'
    gui_hint: 0,0,1,3
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"RF Signal Display"'
    plotconst: 'False'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'True'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 44.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate/8
    comment: Display the audio waveform
    fc: '0'
    fftsize: '1024'
    gui_hint: 3,0,1,3
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Demodulated Audio Signal Display"'
    plotconst: 'False'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: float
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1976, 236.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '0']
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0_0, '1']
- [audio_source_0, '0', blocks_float_to_complex_0_0, '1']
- [audio_source_0, '1', blocks_float_to_complex_0_0, '0']
- [blocks_add_xx_0_1, '0', blocks_multiply_const_vxx_0_1, '0']
- [blocks_complex_to_float_0, '0', blocks_multiply_xx_0, '1']
- [blocks_complex_to_float_0, '1', blocks_multiply_xx_0_0, '0']
- [blocks_complex_to_mag_squared_0, '0', epy_block_0_0, '0']
- [blocks_float_to_complex_0_0, '0', iqbalance_fix_cc_0, '0']
- [blocks_moving_average_xx_0, '0', qtgui_number_sink_0_0, '0']
- [blocks_moving_average_xx_0_0, '0', qtgui_number_sink_0_0_0, '0']
- [blocks_multiply_const_vxx_0_0_1, '0', blocks_add_xx_0_1, '1']
- [blocks_multiply_const_vxx_0_1, '0', audio_sink_0_0, '0']
- [blocks_multiply_const_vxx_0_1, '0', fir_filter_xxx_0, '0']
- [blocks_multiply_xx_0, '0', blocks_add_xx_0_1, '0']
- [blocks_multiply_xx_0_0, '0', blocks_multiply_const_vxx_0_0_1, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [epy_block_0_0, '0', blocks_moving_average_xx_0, '0']
- [epy_block_0_0, '1', blocks_moving_average_xx_0_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [fir_filter_xxx_0, '0', qtgui_sink_x_0_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_complex_to_float_0, '0']
- [iqbalance_fix_cc_0, '0', blocks_stream_to_vector_0, '0']
- [iqbalance_fix_cc_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [iqbalance_fix_cc_0, '0', qtgui_sink_x_0, '0']
- [qtgui_edit_box_msg_0, msg, blocks_msgpair_to_var_0, inpair]
- [qtgui_edit_box_msg_0, msg, epy_block_0, frequencyPort]

metadata:
  file_format: 1
